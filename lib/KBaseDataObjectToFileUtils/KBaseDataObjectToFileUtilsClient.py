# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class KBaseDataObjectToFileUtils(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def TranslateNucToProtSeq(self, params, context=None):
        """
        Methods for converting KBase Data Objects to common bioinformatics format files
        **
        :param params: instance of type "TranslateNucToProtSeq_Params"
           (TranslateNucToProtSeq() Params) -> structure: parameter "nuc_seq"
           of String, parameter "genetic_code" of String
        :returns: instance of type "TranslateNucToProtSeq_Output"
           (TranslateNucToProtSeq() Output) -> structure: parameter
           "prot_seq" of String
        """
        return self._client.call_method(
            'KBaseDataObjectToFileUtils.TranslateNucToProtSeq',
            [params], self._service_ver, context)

    def GenomeToFASTA(self, params, context=None):
        """
        :param params: instance of type "GenomeAnnotationToFASTA_Params"
           (GenomeAnnotationToFASTA() Params) -> structure: parameter
           "genome_ref" of type "data_obj_ref", parameter "file" of type
           "path_type", parameter "dir" of type "path_type", parameter
           "console" of list of type "log_msg", parameter "invalid_msgs" of
           list of type "log_msg", parameter "residue_type" of String,
           parameter "feature_type" of String, parameter "record_id_pattern"
           of type "pattern_type", parameter "record_desc_pattern" of type
           "pattern_type", parameter "case" of String, parameter "linewrap"
           of Long
        :returns: instance of type "GenomeAnnotationToFASTA_Output"
           (GenomeAnnotationToFASTA() Output) -> structure: parameter
           "output_file" of type "path_type", parameter "feature_ids" of list
           of String
        """
        return self._client.call_method(
            'KBaseDataObjectToFileUtils.GenomeToFASTA',
            [params], self._service_ver, context)

    def GenomeAnnotationToFASTA(self, params, context=None):
        """
        :param params: instance of type "GenomeAnnotationToFASTA_Params"
           (GenomeAnnotationToFASTA() Params) -> structure: parameter
           "genome_ref" of type "data_obj_ref", parameter "file" of type
           "path_type", parameter "dir" of type "path_type", parameter
           "console" of list of type "log_msg", parameter "invalid_msgs" of
           list of type "log_msg", parameter "residue_type" of String,
           parameter "feature_type" of String, parameter "record_id_pattern"
           of type "pattern_type", parameter "record_desc_pattern" of type
           "pattern_type", parameter "case" of String, parameter "linewrap"
           of Long
        :returns: instance of type "GenomeAnnotationToFASTA_Output"
           (GenomeAnnotationToFASTA() Output) -> structure: parameter
           "output_file" of type "path_type", parameter "feature_ids" of list
           of String
        """
        return self._client.call_method(
            'KBaseDataObjectToFileUtils.GenomeAnnotationToFASTA',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('KBaseDataObjectToFileUtils.status',
            [], self._service_ver, context)
